/*

Happy Number (LeetCode) - https://leetcode.com/problems/happy-number/                   

Write an algorithm to determine if a number n is "happy".

A happy number is a number defined by the following process:

- Starting with any positive integer, replace the number by the sum of the squares of its digits.   
- Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.     
- Those numbers for which this process ends in 1 are happy.

Return true if n is a happy number, and false if not.                       

Example 1:
Input: n = 19

Output: true    

Explanation:

1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

Example 2:
Input: n = 2

Output: false

Constraints:    
1 <= n <= 2^31 - 1


Approach:
1. We can use the Fast & Slow pointers approach to solve this problem.
2. The Fast & Slow pointers method is an efficient approach to find cycles in the linked lists.
3. We can use the same approach to find a cycle among numbers generated by the given function.
4. The algorithm is based on the idea that we can treat the number as a linked list.
5. The getNext(n) function calculates the sum of the squares of the digits of the number n.
6. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.
7. If the number is a happy number, the fast pointer will reach 1 before the slow pointer.
8. If the number is not a happy number, the fast pointer will loop endlessly in a cycle.
9. We can also use a hash set to keep track of all numbers generated by the getNext(n) function.
10. If the number is a happy number, the fast pointer will reach 1 before the number is repeated.
11. If the number is not a happy number, the number will be repeated before the fast pointer reaches 1.
12. The time complexity of the algorithm is O(log n) and the space complexity is O(1) or O(log n) depending on the approach used.



*/




#include <iostream>
#include <unordered_set>

int getNext(int n) {
    int totalSum = 0;
    while (n > 0) {
        int digit = n % 10;
        n = n / 10;
        totalSum += digit * digit;
    }
    return totalSum;
}

bool isHappy(int n) {
    int slow = n;
    int fast = getNext(n);
    while (fast != 1 && slow != fast) {
        slow = getNext(slow);
        fast = getNext(getNext(fast));
    }
    return fast == 1;
}

bool isHappyUsingsSet(int n) {
    std::unordered_set<int> seenNumbers;
    while (n != 1 && seenNumbers.find(n) == seenNumbers.end()) {
        seenNumbers.insert(n);
        n = getNext(n);
    }
    return n == 1;
}

int main() {
    int number;
    std::cout << "Enter a number: ";
    std::cin >> number;

    if (isHappy(number)) {
        std::cout << number << " is a happy number." << std::endl;
    } else {
        std::cout << number << " is not a happy number." << std::endl;
    }

    return 0;
}